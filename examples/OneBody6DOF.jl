using LinearAlgebra, DifferentialEquations, StaticArrays, Plots, UnPack, ComponentArrays

include("..\\blue42.jl")

N = WorldFrame()

B = Body(
    name=:B,
    m=100,
    I=SMatrix{3,3,Float64}(I(3) * 100),
    cm=zeros(3),    
)

dof6 = DOF6(name = :·¥∫G·¥Æ)

·¥∫U·¥Æ = Connection(
    B·µ¢ = N,
    B‚Çí = B,
    G = dof6
)

sys = System(
    name=:oneBody6DOF,
    world = N,
    bodies=B,
    joints=dof6,
    connections= ·¥∫U·¥Æ
)
#=
# Initial Conditions
üññ = ComponentArray(
    body=ComponentArray(
        q=[0, 0, 0, 1],
        œâ=zeros(3), # body attitude rate
        r=zeros(3),
        v=zeros(3), # initial translational velocity
    ),
    pendulum=ComponentArray(
        Œ∏=0,
        œÉ=pi / 6,
    ),
    joint=(
        r·µ¶‚±º=[0, 1, 0],
        r‚Çö‚±º=[0, 1, 0],
        r‚ÇÇ=[0, 0, 0]
    )
)

scross(x) = SA[
    0 -x[3] x[2]
    x[3] 0 -x[1]
    -x[2] x[1] 0
]
function qtoa(q)
    i123 = SA[1, 2, 3]
    a = diagm(q[4]^2 - q[i123]' * q[i123]) + 2 * q[i123] * q[i123]' - 2 * scross(q[i123] * q[4])
end

# Equations of Motion
function eom!(d, üññ, p, t)
    # map states and parameters    
    œâ = SVector{3}(üññ.body.œâ)
    v = SVector{3}(üññ.body.v)
    q = SVector{4}(üññ.body.q)
    r = SVector{3}(üññ.body.r)
    Œ∏ = üññ.pendulum.Œ∏
    œÉ = üññ.pendulum.œÉ
    r·µ¶‚±º = üññ.joint.r·µ¶‚±º
    r‚Çö‚±º = üññ.joint.r‚Çö‚±º
    r‚ÇÇ = üññ.joint.r‚ÇÇ

    @unpack mÃÑ, IÃÑ = p

    Œì = SA[0, 0, 1]

    ·¥∫C·¥Æ = qtoa(q)
    ·¥∫C·µñ = [
        cos(Œ∏) sin(Œ∏) 0
        sin(Œ∏) -cos(Œ∏) 0
        0 0 1
    ]
    Œ© = [
        I(3) zeros(3) zeros(3, 3)
        C Œì zeros(3, 3)
    ]

    œÅ‚ÇÇ‚ÇÅ =
        V = [
            zeros(3, 3) zeros(3) I(3)
            r2
        ]

    # uÃá equations (1) Equation 42
    COEF = Œ©' * IÃÑ * Œ© + V' * mÃÑ * V
    RHS = Œ©' * (T - IÃÑ * Œ±‚Çú - œâ √ó (IÃÑ * œâ)) + V' * (F - mÃÑ * Œ±‚Çú)

    d.u = COEF \ RHS

    # xÃá equations (1) Equations 43:45
    d.x.q = 0.5 * SA[
                q[4] -q[3] q[2]
                q[3] q[4] -q[1]
                -q[2] q[1] q[4]
                -q[1] -q[2] -q[3]
            ] * œâ
    d.x.r = v
    nothing
end


f_thrust_start!(s) = s.u.thruster_command = 1.0
thrust_start = PresetTimeCallback(5.0, f_thrust_start!)

f_thrust_stop!(s) = s.u.thruster_command = 0.0
thrust_stop = PresetTimeCallback(6.0, f_thrust_stop!)

#define any algebraic relationships here
function func_cb!(u, t, s)
    s.u.H‚Çõ = s.p.IÃÑ * s.u.u.œâ
    nothing
end
func_cb = FunctionCallingCallback(func_cb!)
function per_cb!(s)
    s.u.H‚Çõ = s.p.IÃÑ * s.u.u.œâ
    nothing
end
per_cb = PeriodicCallback(per_cb!, 1)

prob = ODEProblem(eom!, üññ, (0, 10), p)
sol = solve(prob, Tsit5(), callback=CallbackSet(thrust_start, thrust_stop, per_cb), dt=1, adaptive=false)
=#